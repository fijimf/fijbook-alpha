
//play.crypto.secret="o<LpmBw0>Nux0Sey=d4H2pyVQc>ffDK]GK=VEy<0De^btRMoj9e[f6T0Oih=LMmN"
//play.i18n.langs="en"

play.evolutions.enabled=false
slick.dbs.default.driver="slick.driver.MySQLDriver$"
slick.dbs.default.db.driver=com.mysql.jdbc.Driver
slick.dbs.default.db.url="jdbc:mysql://localhost/deepfijdb?useSSL=false&characterEncoding=UTF-8"
slick.dbs.default.db.user="root"
//slick.dbs.default.db.password="mutombo"
slick.dbs.default.db.logStatements=false
slick.dbs.default.db.leakDetectionThreshold=1 minute

slick.dbs.default.db.numThreads=50
//slick.dbs.default.db.queueSize=2048




# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"

play.filters.headers.contentSecurityPolicy = null

play.modules.enabled += "modules.BaseModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "modules.ScrapingModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"


akka {
  loglevel = "WARNING"

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "America/New_York"
    description = "cleanup the auth tokens on every hour"
  }

  quartz.schedules.DailyScheduleUpdater {
    expression = "0 0 3 * * ?"
    timezone = "America/New_York"
    description = "load the data once a day"
  }

  quartz.schedules.IntradayScheduleUpdater {
    expression = "0 10,30,50 * * * ?"
    timezone = "America/New_York"
    description = "Update games intraday"
  }

  quartz.schedules.DailyStatsUpdater {
    expression = "0 0 4 * * ?"
    timezone = "America/New_York"
    description = "Update statistics once a day"
  }

  quartz.schedules.MemoryWatchdog {
    expression = "0 0,5,10,15,20,25,30,35,40,45,50,55 * * * ?"
    timezone = "America/New_York"
    description = "Memory check"
  }
}

#Kamon

//kamon {
//  system-metrics {
//    sigar-enabled = true
//  }
//
//  metric {
//    tick-interval = 5 minutes
//  }
//
//
//  play {
//    include-trace-token-header = true
//    trace-token-header-name = "X-Trace-Token"
//  }
//
//  modules {
//    kamon-akka {
//      auto-start = yes
//      requires-aspectj = yes
//      extension-id = "kamon.akka.Akka"
//    }
//
//    kamon-log-reporter {
//      auto-start = yes
//      requires-aspectj = no
//      extension-id = "kamon.logreporter.LogReporter"
//    }
//
//    kamon-system-metrics {
//      auto-start = yes
//      requires-aspectj = no
//      extension-id = "kamon.system.SystemMetrics"
//    }
//  }
//}



# Play mailer
play.mailer {
  host=email-smtp.us-east-1.amazonaws.com
  port=587
  tls=true
  user=${?MAIL_USER}
  password=${?MAIL_PASSWORD}
}

# Security Filter Configuration - Content Security Policy
//play.filters.headers {
//  contentSecurityPolicy = "default-src 'self';"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' clef.io cdnjs.cloudflare.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" frame-src clef.io;"
//}
silhouette {

  # Authenticator settings
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  authenticator.httpOnlyCookie=true
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=30 minutes
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.cookie.signer.key = "[changeme]" // A unique encryption key
  authenticator.crypter.key = "[changeme]" // A unique encryption key

  # OAuth1 token secret provider settings
  oauth1TokenSecretProvider.cookieName="OAuth1TokenSecret"
  oauth1TokenSecretProvider.cookiePath="/"
  oauth1TokenSecretProvider.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth1TokenSecretProvider.httpOnlyCookie=true
  oauth1TokenSecretProvider.expirationTime=5 minutes

  oauth1TokenSecretProvider.cookie.signer.key = "[changeme]" // A unique encryption key
  oauth1TokenSecretProvider.crypter.key = "[changeme]" // A unique encryption key

  # OAuth2 state provider settings
  oauth2StateProvider.cookieName="OAuth2State"
  oauth2StateProvider.cookiePath="/"
  oauth2StateProvider.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth2StateProvider.httpOnlyCookie=true
  oauth2StateProvider.expirationTime=5 minutes

  oauth2StateProvider.cookie.signer.key = "[changeme]" // A unique encryption key

  # Facebook provider
  facebook.authorizationURL="https://graph.facebook.com/v2.3/oauth/authorize"
  facebook.accessTokenURL="https://graph.facebook.com/v2.3/oauth/access_token"
  facebook.redirectURL="http://localhost:9000/deepfijauthenticate/facebook"
  facebook.clientID=""
  facebook.clientID=${?FACEBOOK_CLIENT_ID}
  facebook.clientSecret=""
  facebook.clientSecret=${?FACEBOOK_CLIENT_SECRET}
  facebook.scope="email"

  # Google provider
  google.authorizationURL="https://accounts.google.com/o/oauth2/auth"
  google.accessTokenURL="https://accounts.google.com/o/oauth2/token"
  google.redirectURL="http://localhost:9000/deepfij/authenticate/google"
  google.clientID=""
  google.clientID=${?GOOGLE_CLIENT_ID}
  google.clientSecret=""
  google.clientSecret=${?GOOGLE_CLIENT_SECRET}
  google.scope="profile email"

  # VK provider
  vk.authorizationURL="http://oauth.vk.com/authorize"
  vk.accessTokenURL="https://oauth.vk.com/access_token"
  vk.redirectURL="http://localhost:9000/deepfij/authenticate/vk"
  vk.clientID=""
  vk.clientID=${?VK_CLIENT_ID}
  vk.clientSecret=""
  vk.clientSecret=${?VK_CLIENT_SECRET}
  vk.scope="email"

  # Clef provider
  clef.accessTokenURL="https://clef.io/api/v1/authorize"
  clef.redirectURL="http://localhost:9000/deepfij/authenticate/clef"
  clef.clientID=""
  clef.clientID=${?CLEF_CLIENT_ID}
  clef.clientSecret=""
  clef.clientSecret=${?CLEF_CLIENT_SECRET}

  # Twitter provider
  twitter.requestTokenURL="https://twitter.com/oauth/request_token"
  twitter.accessTokenURL="https://twitter.com/oauth/access_token"
  twitter.authorizationURL="https://twitter.com/oauth/authenticate"
  twitter.callbackURL="http://localhost:9000/deepfij/authenticate/twitter"
  twitter.consumerKey=""
  twitter.consumerKey=${?TWITTER_CONSUMER_KEY}
  twitter.consumerSecret=""
  twitter.consumerSecret=${?TWITTER_CONSUMER_SECRET}

  # Xing provider
  xing.requestTokenURL="https://api.xing.com/v1/request_token"
  xing.accessTokenURL="https://api.xing.com/v1/access_token"
  xing.authorizationURL="https://api.xing.com/v1/authorize"
  xing.callbackURL="http://localhost:9000/deepfij/authenticate/xing"
  xing.consumerKey=""
  xing.consumerKey=${?XING_CONSUMER_KEY}
  xing.consumerSecret=""
  xing.consumerSecret=${?XING_CONSUMER_SECRET}

  # Yahoo provider
  yahoo.providerURL="https://me.yahoo.com/"
  yahoo.callbackURL="http://localhost:9000/deepfij/authenticate/yahoo"
  yahoo.axRequired={
    "fullname": "http://axschema.org/namePerson",
    "email": "http://axschema.org/contact/email",
    "image": "http://axschema.org/media/image/default"
  }
  yahoo.realm="http://localhost:9000"
}

deepfij {
  activeSeason=2017
}